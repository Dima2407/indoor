@startuml

title   Общее представление библиотеки-модуля Navigator. Структура классов.


class GeneralNavigator{
    Центральный пользовательский класс
    предоставляет возможности настройки
    режимов работы библиотеки, ввода и
    вывода данных.
    Вводимые данные в зависимости от
    типа этих данных и конфигурации модуля
    распределяет в соответствующие классы.
    Содержит все подлежащие классы
    навигации и управляет ими.
    В зависимости от конфигурации усредняет,
    суммирует, фильтрует, интегрирует
    полученные от подлежащих навигационных
    классов-модулей координаты.
	__
    режимы работы
    # mode
    частота выдачи данных наружу
    # output_frequency

    + setMode(), getMode()
	--
	обработать новые данные и вызвать
	dataProcessDoneEventCallbacks
	+ processMeasurement( InputNavigationData );
	..
	список функций для вызова, когда обработка будет
	завершена
	+ dataProcessDoneEventCallbacks : std::list<std::function>
}


class BeaconNavigator{
    Навигация по маякам типа
    Bluetooth beacon RSSI
    и WiFi-ным точкам доступа
    fingerprinting
}

abstract NavigatorBySensors{


}



interface IRssiNavigator{
    Navigator из tracking_lib
    реализует этот интерфейс
    --
    +processMeasurement(BleBeaconData const&)
}


class BleBeaconNavigator{
    напиример, это может быть
    tracking_lib::Navigator
}

class AlternativeBleBeaconNavigator1


interface FingerprintNavigator{

}



GeneralNavigator o-down- BeaconNavigator
GeneralNavigator o-down- NavigatorBySensors

BeaconNavigator <-up- IRssiNavigator
BeaconNavigator <-up- FingerprintNavigator

IRssiNavigator <-up- BleBeaconNavigator
IRssiNavigator <-up- AlternativeBleBeaconNavigator1


'class BeaconList{
'	data : std::list<Beacon>
'}
'class BeaconListProvider
'
BeaconNavigator o-left- abstract BeaconList
'BeaconList o-left- Beacon




abstract InputNavigationData{
    данные собираемые устройством:
    1. BleBeaconData,
    2. WiFiAccessPointData
    3. Ускорения ax, ay, az
    4. Гироскоп
    5. Магнитометр
    6. ...
    '__
    'для простоты и универсальности
    'приходят в виде ByteArray
    '# ByteArray ba;
    '--
    ''+ serialize()
    '+ deserialize()
    '__
    'А можно например в JSON
    '+ parse()
}
abstract OutputNavigationData{
    положение
    timestamp
    x
    y
    ..
    и направление
    alpha
    beta
    gamma
    __
    + serialize()
    + deserialize()
}

InputNavigationData --left--o  GeneralNavigator
OutputNavigationData --right--o  GeneralNavigator

abstract InputNavigationDataBuffer o-down-  InputNavigationData
abstract OutputNavigationDataBuffer o-down-  OutputNavigationData












newpage
title   Входные данные interface BeaconNavigator

interface BeaconNavigator{

}

class BeaconList{
	data : std::list<Beacon>
}
interface BeaconListProvider{
	+ getNextBeacon() : Beacon
	+ pushBeaconsToList( BeaconList& ) : void
}

interface BeaconNavigator o-left- BeaconList
BeaconListProvider o-down- BeaconList
BeaconList o-left- Beacon
BeaconListProvider o-- Beacon


@enduml