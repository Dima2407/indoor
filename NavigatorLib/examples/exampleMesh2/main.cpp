//
// Created by  Oleksiy Grechnyev on 4/21/2017.
//

#include <iostream>
#include <fstream>
#include <vector>

#include "Navigator.h"

// Test the post-processing of a Position3D using a mesh and a mask table
// This version reads files mesh.in and masktable.out generated by maskgen
int main(){
    using namespace std;
    using namespace Navigator::Mesh;
    using namespace Navigator::Math;

    /*// Read the mesh from mesh.in
    double nx, ny;
    double dx, dy;
    double x0, y0;

    cout << "Reading mesh from mesh.in\n";
    ifstream in1("mesh.in");
    if (!in1) {
        cerr << "Error: Cannot open file mesh.in \n";
        exit(1);
    }
    in1 >> nx >> ny >> dx >> dy >> x0 >> y0;
    if (!in1) {
        std::cerr << "Error reading data from file mesh.in \n";
        exit(1);
    }
    in1.close();*/

    cout << "Reading mesh from mesh.in\n";


    // Create mesh struct
    RectanMesh mesh("mesh.in");

    //-------------------------------------------
    // Read the mask table from masktable.out

    int size = mesh.size();
    vector<int> mTable(size);

    cout << "Reading mesh from masktable.out\n";
    ifstream in2("masktable.out");
    if (!in2) {
        cerr << "Error: Cannot open file masktable.out \n";
        exit(1);
    }
    for (int i=0; i< size; i++) {
        in2 >> mTable[i];
        if (!in2) {
            std::cerr << "Error reading data from file masktable.out \n";
            exit(1);
        }
    }
    in2.close();

    // Load the table into the mesh
    mesh.setMaskTable(mTable);

    //-------------------------------------------

    cout << "Guess the mesh ! Enter x, y :\n";
    double x,y;

    cin >> x >> y;

    Position3D result = mesh.process(Position3D(x, y, 0));

    cout << "Result = (" << result.x << ", " << result.y << ")\n";

    return 0;
}
